<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Definition for singly-linked list</title>
    <url>/2019/04/19/Definition-for-singly-linked-list/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h1 id="Definition-for-singly-linked-list"><a href="#Definition-for-singly-linked-list" class="headerlink" title="Definition for singly-linked list"></a>Definition for singly-linked list</h1><img src="/2019/04/19/Definition-for-singly-linked-list/list.png" class="" title="list">

<p>比方说有链表1:n1 n2 n3 n4<br>有链表2:n5 n3 n4<br>实际上n3和n4是同一个，也就是他们在n3时交叉的</p>
<p><img src="/Users/haoboxuxu/Desktop/blog-md/imgs/list.png" alt="list"></p>
<p>如果是分别遍历，复杂度是O(n2)，接下来介绍O(n)解法<br>假设长的链表为len1，短的为len2<br>那么把长的移动len1-len2<br>然后两个链表指针可以同时移动了，找到交叉的节点就返回，复杂度O(n)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    Node* next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLen</span><span class="params">(Node *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        len++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">listMove</span><span class="params">(Node*p, <span class="keyword">int</span> diff)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; diff; i++)&#123;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Node* <span class="title">findCommon</span><span class="params">(Node *l1, Node *l2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len1 = <span class="built_in">getLen</span>(l1);</span><br><span class="line">    <span class="keyword">int</span> len2 = <span class="built_in">getLen</span>(l2);</span><br><span class="line">    Node *longListP, *shortListP;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len1 &gt; len2)&#123;</span><br><span class="line">        longListP = l1;</span><br><span class="line">        shortListP = l2;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        longListP = l2;</span><br><span class="line">        shortListP = l1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> diff = <span class="built_in">abs</span>(len1 - len2);</span><br><span class="line">    longListP = <span class="built_in">listMove</span>(longListP, diff);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(longListP != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(longListP == shortListP)&#123;</span><br><span class="line">            <span class="keyword">return</span> longListP;</span><br><span class="line">        &#125;</span><br><span class="line">        longListP = longListP-&gt;next;</span><br><span class="line">        shortListP = shortListP-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node n1, n2, n3, n4, n5;</span><br><span class="line">    Node *l1 = &amp;n1, *l2 = &amp;n5;</span><br><span class="line">    n1.val = <span class="number">1</span>;</span><br><span class="line">    n2.val = <span class="number">2</span>;</span><br><span class="line">    n3.val = <span class="number">3</span>;</span><br><span class="line">    n4.val = <span class="number">4</span>;</span><br><span class="line">    n5.val = <span class="number">5</span>;</span><br><span class="line">    n1.next = &amp;n2;</span><br><span class="line">    n2.next = &amp;n3;</span><br><span class="line">    n3.next = &amp;n4;</span><br><span class="line">    n5.next = &amp;n3;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="built_in">findCommon</span>(l1, l2)-&gt;val &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>A self create Algorithm to link nodes in ARKit</title>
    <url>/2020/04/27/A-self-create-Algorithm-to-link-nodes-in-ARKit/</url>
    <content><![CDATA[<hr>
<p>这是我瞎发明的SCNCylinder链接ARkit或者Scenekit中两个节点的小算法，因为SCNCylinder不能设置起始位置和结束位置，只能通过三角函数自己旋转，下面代码需要的直接CV就好了</p>
<span id="more"></span>

<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">linkTwoNodes</span>(<span class="keyword">_</span> <span class="params">node1</span>: <span class="type">SCNNode</span>, <span class="keyword">_</span> <span class="params">node2</span>: <span class="type">SCNNode</span>, <span class="keyword">_</span> <span class="params">lineNode</span>: <span class="type">SCNNode</span>, <span class="keyword">_</span> <span class="params">line</span>: <span class="type">SCNCylinder</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p1 <span class="operator">=</span> node1.position</span><br><span class="line">        <span class="keyword">let</span> p2 <span class="operator">=</span> node2.position</span><br><span class="line">        <span class="keyword">let</span> dx <span class="operator">=</span> p1.x <span class="operator">-</span> p2.x</span><br><span class="line">        <span class="keyword">let</span> dy <span class="operator">=</span> p1.y <span class="operator">-</span> p2.y</span><br><span class="line">        <span class="keyword">let</span> dz <span class="operator">=</span> p1.z <span class="operator">-</span> p2.z</span><br><span class="line">       </span><br><span class="line">        line.height <span class="operator">=</span> get3dDis(node1.position, node2.position)</span><br><span class="line">       </span><br><span class="line">        lineNode.position <span class="operator">=</span> <span class="type">SCNVector3</span>((p1.x<span class="operator">+</span>p2.x)<span class="operator">/</span><span class="number">2</span>, (p1.y<span class="operator">+</span>p2.y)<span class="operator">/</span><span class="number">2</span>, (p1.z<span class="operator">+</span>p2.z)<span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">var</span> rotateX: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> rotateZ: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">let</span> crossLen:<span class="type">Float</span> <span class="operator">=</span> <span class="type">Float</span>(<span class="built_in">abs</span>(sqrt(pow(dx, <span class="number">2</span>) <span class="operator">+</span> pow(dy, <span class="number">2</span>))))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: dx, len2: dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> atanRotation(len1: <span class="operator">-</span>dx, len2: dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: <span class="operator">-</span>dx, len2: <span class="operator">-</span>dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> atanRotation(len1: dx, len2: <span class="operator">-</span>dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> <span class="type">Float</span>.pi <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: <span class="operator">-</span>dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> atanRotation(len1: dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> atanRotation(len1: <span class="operator">-</span>dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">//mod</span></span><br><span class="line">            <span class="keyword">if</span> dz <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">                rotateX <span class="operator">=</span> <span class="type">Float</span>.pi <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lineNode.eulerAngles.x <span class="operator">=</span> <span class="type">Float</span>(rotateX)</span><br><span class="line">        lineNode.eulerAngles.z <span class="operator">=</span> <span class="type">Float</span>(rotateZ)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">linkTwoNodes</span>(<span class="keyword">_</span> <span class="params">node1</span>: <span class="type">SCNNode</span>, <span class="keyword">_</span> <span class="params">node2</span>: <span class="type">SCNNode</span>, <span class="keyword">_</span> <span class="params">lineNode</span>: <span class="type">SCNNode</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> p1 <span class="operator">=</span> node1.position</span><br><span class="line">        <span class="keyword">let</span> p2 <span class="operator">=</span> node2.position</span><br><span class="line">        <span class="keyword">let</span> dx <span class="operator">=</span> p1.x <span class="operator">-</span> p2.x</span><br><span class="line">        <span class="keyword">let</span> dy <span class="operator">=</span> p1.y <span class="operator">-</span> p2.y</span><br><span class="line">        <span class="keyword">let</span> dz <span class="operator">=</span> p1.z <span class="operator">-</span> p2.z</span><br><span class="line">       </span><br><span class="line">        lineNode.position <span class="operator">=</span> <span class="type">SCNVector3</span>((p1.x<span class="operator">+</span>p2.x)<span class="operator">/</span><span class="number">2</span>, (p1.y<span class="operator">+</span>p2.y)<span class="operator">/</span><span class="number">2</span>, (p1.z<span class="operator">+</span>p2.z)<span class="operator">/</span><span class="number">2</span>)</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">var</span> rotateX: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">var</span> rotateZ: <span class="type">Float</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">       </span><br><span class="line">        <span class="keyword">let</span> crossLen:<span class="type">Float</span> <span class="operator">=</span> <span class="type">Float</span>(<span class="built_in">abs</span>(sqrt(pow(dx, <span class="number">2</span>) <span class="operator">+</span> pow(dy, <span class="number">2</span>))))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: dx, len2: dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> atanRotation(len1: <span class="operator">-</span>dx, len2: dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: <span class="operator">-</span>dx, len2: <span class="operator">-</span>dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dx <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> atanRotation(len1: dx, len2: <span class="operator">-</span>dy)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateZ <span class="operator">=</span> <span class="type">Float</span>.pi <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: <span class="operator">-</span>dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&gt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> atanRotation(len1: dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&gt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> <span class="operator">-</span>atanRotation(len1: dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">&lt;</span> <span class="number">0</span> <span class="operator">&amp;&amp;</span> dz <span class="operator">&lt;</span> <span class="number">0</span> &#123;</span><br><span class="line">            rotateX <span class="operator">=</span> atanRotation(len1: <span class="operator">-</span>dz, len2: crossLen)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> dy <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">            <span class="comment">//mod</span></span><br><span class="line">            <span class="keyword">if</span> dz <span class="operator">!=</span> <span class="number">0</span> &#123;</span><br><span class="line">                rotateX <span class="operator">=</span> <span class="type">Float</span>.pi <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lineNode.eulerAngles.x <span class="operator">=</span> <span class="type">Float</span>(rotateX)</span><br><span class="line">        lineNode.eulerAngles.z <span class="operator">=</span> <span class="type">Float</span>(rotateZ)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">get3dDis</span>(<span class="keyword">_</span> <span class="params">p1</span>: <span class="type">SCNVector3</span>, <span class="keyword">_</span> <span class="params">p2</span>: <span class="type">SCNVector3</span>)</span> -&gt; <span class="type">CGFloat</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> dx <span class="operator">=</span> p1.x <span class="operator">-</span> p2.x</span><br><span class="line">    <span class="keyword">let</span> dy <span class="operator">=</span> p1.y <span class="operator">-</span> p2.y</span><br><span class="line">    <span class="keyword">let</span> dz <span class="operator">=</span> p1.z <span class="operator">-</span> p2.z</span><br><span class="line">    <span class="keyword">return</span> <span class="type">CGFloat</span>(<span class="built_in">abs</span>(sqrt(pow(dx, <span class="number">2</span>) <span class="operator">+</span> pow(dy, <span class="number">2</span>) <span class="operator">+</span> pow(dz, <span class="number">2</span>))))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">atanRotation</span>(<span class="params">len1</span>: <span class="type">Float</span>, <span class="params">len2</span>: <span class="type">Float</span>)</span> -&gt; <span class="type">Float</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> len2 <span class="operator">==</span> <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">Float</span>.pi <span class="operator">/</span> <span class="number">2</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> len1 <span class="operator">==</span> <span class="number">0</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> atan(len1 <span class="operator">/</span> len2)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Elliptical Grid Mapping</title>
    <url>/2021/05/29/Elliptical-Grid-Mapping/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p>最近看视频做RPG，有个有趣的问题，比如控制角色的走动时候用Dup和Dright两个变量，范围都是[-1, 1]，但是比如W键和D键同时按下时候算位移的Vector2时会有√2的问题，因为√(1+1)。<br>如果你考虑用clamp的话那么角色会很快加速过去了，这里有个论文讲Elliptical Grid Mapping，就是把一个正方形map到圆上，链接如下。</p>
<p>[论文URL]<a href="https://arxiv.org/ftp/arxiv/papers/1509/1509.06344.pdf">https://arxiv.org/ftp/arxiv/papers/1509/1509.06344.pdf</a></p>
<img src="/2021/05/29/Elliptical-Grid-Mapping/EllipticalGridMapping_1.jpg" class="" title="EllipticalGridMapping_1">

<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Vector2 <span class="title">SquareToCircle</span>(<span class="params">Vector2 input</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector2 output = Vector2.zero;</span><br><span class="line">    <span class="comment">//公式如上图</span></span><br><span class="line">    output.x = input.x * Mathf.Sqrt(<span class="number">1</span> - (input.y * input.y) / <span class="number">2.0f</span>);</span><br><span class="line">    output.y = input.y * Mathf.Sqrt(<span class="number">1</span> - (input.x * input.x) / <span class="number">2.0f</span>);</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    Vector2 tempDAxis = SquareToCircle(<span class="keyword">new</span> Vector2(Dright, Dup)); <span class="comment">//Dright和Dup是控制角色移动的，上面提到了</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">float</span> Dright2 = tempDAxis.y;</span><br><span class="line">    <span class="built_in">float</span> Dup2 = tempDAxis.x;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//下面就可以做其他的逻辑了</span></span><br><span class="line">    Dmag = Mathf.Sqrt((Dup2 * Dup2) + (Dright2 * Dright2));</span><br><span class="line">    Dvec = Dright2 * transform.right + Dup2 * transform.forward;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Jump Consistent Hash</title>
    <url>/2020/01/09/Jump-Consistent-Hash/</url>
    <content><![CDATA[<hr>
<p>大三一个课的小作业，做得小调研</p>
<span id="more"></span>

<p>Consistent Hash就是为了解决负载均衡的问题，如下图，把不同资源的访问分配的不同的服务器缓解压力；算法就是解决服务器和文件的映射</p>
<p>谈到映射就想到hash；如果你打过acm，就不得不说下面的哈希方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 1 &lt;&lt; 30</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> base 233</span></span><br><span class="line">ll mod = inf;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">myHash</span><span class="params">(<span class="keyword">char</span> s[])</span></span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>, len = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        res = (base * res + (ll)s[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>存在很大的问题就是服务器数量相当于mod，数量有改变mod改变，整个hash就乱套了，于是乎有了Consistent Hash，这里不详细解释，这里讲的是Google的Jump Consistent Hash，8行代码，短小精悍。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">JumpConsistentHash</span><span class="params">(<span class="keyword">uint64_t</span> key, <span class="keyword">int32_t</span> num_buckets)</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">int64_t</span> b = <span class="number">-1</span>, j = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (j &lt; num_buckets) &#123;  </span><br><span class="line">        b = j;  </span><br><span class="line">        key = key * <span class="number">2862933555777941757ULL</span> + <span class="number">1</span>;  </span><br><span class="line">        j = (b + <span class="number">1</span>) * (<span class="built_in"><span class="keyword">double</span></span>(<span class="number">1LL</span> &lt;&lt; <span class="number">31</span>) / <span class="built_in"><span class="keyword">double</span></span>((key &gt;&gt; <span class="number">33</span>) + <span class="number">1</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> b;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这么一看你肯定是懵逼了，我一步步来解释。<br>这里先令f(key, n)为一致性哈希算法,输出的为[0,n)之间的数字，代表数据在对应的节点上。</p>
<p>1.n=1时，对于任意的key，输出应该都是0。（比如你有1个服务器，那么就是无论如何都是分配到这个服务器上）<br>2.n=2时，负载均衡，应该有1/2的结果保持为0，1/2的结果输出为1。<br>3.n=3时，负载均衡，应该有1/3的结果保持为0，1/3的结果保持为1，1/3的结果保持为2。<br>4.依次递推，节点数由n变为n+1时，f(key, n)里面应该有n/(n+1)的结果不变。<br>结论：<br><strong>有1/(n+1)的结果变为n</strong></p>
<p>如下图，有个重要的规律，在某条不跳变的路径上，数值是一样的。</p>
<p>这个使用概率公式来表示，就是这样的代码，于是我们可以得到下面这个<strong>ch</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ch</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> num_buckets)</span> </span>&#123;  </span><br><span class="line">    random.<span class="built_in">seed</span>(key) ;  </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>; <span class="comment">// This will track ch(key, j +1) .  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; num_buckets; j ++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (random.<span class="built_in">next</span>() &lt; <span class="number">1.0</span>/(j+<span class="number">1</span>) ) b = j ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> b;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>增加一个节点后，一个固定的key输出的结果发生了改变。快速计算出这个固定的key在哪些节点下发生了改变，就可以快速计算出最终答案，就是Jump Consistent Hash的思路。<br>假设某一次结果是b，经过若干次概率测试，下一次改变为a，则从b到a-1这中间，不管节点如何变化，这个key的结果都是不会变化的。<br>根据上一小节的到的概率变化公式，新增一个节点数字不变化的概率是n/(n+1)。<br>那从b到i不变化的概率就是b/i（中间的抵消了）<br>设有随机函数r，当r小于b/i时，f(i)=f(b)。那么i的上界就是(b+1)/r。<br>这个上限也是下一次key发生变化的节点数量，由此可以得出下面的代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ch</span><span class="params">(<span class="keyword">int</span> key, <span class="keyword">int</span> num_buckets)</span> </span>&#123;  </span><br><span class="line">    random. <span class="built_in">seed</span>(key) ;  </span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">-1</span>; <span class="comment">//  bucket number before the previous jump  </span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>; <span class="comment">// bucket number before the current jump  </span></span><br><span class="line">    <span class="keyword">while</span>(j&lt;num_buckets)&#123;  </span><br><span class="line">        b=j;  </span><br><span class="line">        <span class="keyword">double</span> r=random.<span class="built_in">next</span>(); <span class="comment">//  0&lt;r&lt;1.0  </span></span><br><span class="line">        j = <span class="built_in">floor</span>( (b+<span class="number">1</span>) /r);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> b;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于r是均匀的，所以期望是1/2。<br>这样，代码中j就是按照指数级增长的，平均复杂度就是O(log(n))了。</p>
<p>回头看看第一个代码，就可以看懂代码了。</p>
<p>第一个key=key*x+1算是一个伪随机生成器。<br>而j=(b+1)*x/y则是上面的求上界的公式，其中y/x通过浮点数运算来产生(0,1)内的一个随机数。</p>
<p>我们可以发现一开始的代码是没有random. seed的，因为用了线性同余</p>
]]></content>
  </entry>
  <entry>
    <title>c/c++多线程和线程同步</title>
    <url>/2021/05/02/c-c-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5/</url>
    <content><![CDATA[<hr>
<p>文章还没写完呢</p>
<span id="more"></span>

<h1 id="c-c-线程的使用"><a href="#c-c-线程的使用" class="headerlink" title="c/c++线程的使用"></a>c/c++线程的使用</h1><p>编译-l指定动态链接库pthread</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc xxx.c -lpthread -o xxx </span><br></pre></td></tr></table></figure>

<h2 id="1-线程创建"><a href="#1-线程创建" class="headerlink" title="1.线程创建"></a>1.线程创建</h2><p>pthread_t是long类型的线程id<br>pthread_create时callback调用子线程执行的函数，第四个参数是callback传入的void* arg<br>sleep让子线程执行完再挂断主线程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">callback</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;子线程i=: %d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> tid;</span><br><span class="line">	pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;主线程i=: %d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;主线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line">	sleep(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-线程退出"><a href="#2-线程退出" class="headerlink" title="2.线程退出"></a>2.线程退出</h2><p>主线程退出，子线程变主，回收空间</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">callback</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;子线程i=: %d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> tid;</span><br><span class="line">	pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="comment">//for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line">	<span class="comment">//	printf(&quot;主线程i=: %d\n&quot;, i);</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;主线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line">	<span class="comment">//sleep(1);</span></span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-线程回收"><a href="#3-线程回收" class="headerlink" title="3.线程回收"></a>3.线程回收</h2><p>join会让主线程阻塞<br>接受个Test的struct作为资源<br>直接在子线程开struct Test t会开在栈空间，回收后释放了，主线程肯定拿不到这个资源<br>要么：struct Test t开在全局变量，join后拿到Test，然后强转下struct Test* pt = (struct Test*)ptr;<br>要么：在主线程里开struct Test t，然后pthread_join(tid, &amp;ptr)给子线程，子线程在arg拿到，也要强转下struct Test* t = (struct Test*)arg</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//struct Test t; //开在这里</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">callback</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;子线程i=: %d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Test</span>* <span class="title">t</span> =</span> (struct Test*)arg;</span><br><span class="line">	t-&gt;num = <span class="number">100</span>;</span><br><span class="line">	t-&gt;age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">	pthread_exit(&amp;t); <span class="comment">//Test t如果是在子线程中开栈空间后会被释放</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Test</span> <span class="title">t</span>;</span> <span class="comment">//或者开在这里</span></span><br><span class="line">	<span class="keyword">pthread_t</span> tid;</span><br><span class="line">	pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, &amp;t);</span><br><span class="line">	<span class="comment">//for (int i = 0; i &lt; 5; i++) &#123;</span></span><br><span class="line">	<span class="comment">//	printf(&quot;主线程i=: %d\n&quot;, i);</span></span><br><span class="line">	<span class="comment">//&#125;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;主线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line">	<span class="comment">//sleep(1);</span></span><br><span class="line">	<span class="comment">//pthread_exit(NULL);</span></span><br><span class="line">	<span class="keyword">void</span>* ptr;</span><br><span class="line">	pthread_join(tid, &amp;ptr);</span><br><span class="line">	<span class="comment">//struct Test* pt = (struct Test*)ptr;</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%主线程: pt.num=%d, pt.age=%d\n&quot;</span>, t.num, t.age);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-线程分离"><a href="#4-线程分离" class="headerlink" title="4.线程分离"></a>4.线程分离</h2><p>让主线程退出后不会释放子线程的资源<br>这里子线程创建后和主线程分离，子线程死后由内核调度回收</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">callback</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;子线程i=: %d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Test</span>* <span class="title">t</span> =</span> (struct Test*)arg;</span><br><span class="line">	t-&gt;num = <span class="number">100</span>;</span><br><span class="line">	t-&gt;age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">	pthread_exit(&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Test</span> <span class="title">t</span>;</span> <span class="comment">//或者开在这里</span></span><br><span class="line">	<span class="keyword">pthread_t</span> tid;</span><br><span class="line">	pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, &amp;t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;主线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line"></span><br><span class="line">	pthread_detach(tid);</span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-其他线程函数"><a href="#5-其他线程函数" class="headerlink" title="5.其他线程函数"></a>5.其他线程函数</h3><p>pthread_cancel退出子线程，但是会在系统调用之后（printf就是）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Test</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> num;</span><br><span class="line">	<span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">callback</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;子线程i=: %d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;子线程id: %ld\n&quot;</span>, pthread_self()); <span class="comment">//printf系统调用了</span></span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Test</span>* <span class="title">t</span> =</span> (struct Test*)arg;</span><br><span class="line">	t-&gt;num = <span class="number">100</span>;</span><br><span class="line">	t-&gt;age = <span class="number">22</span>;</span><br><span class="line"></span><br><span class="line">	pthread_exit(&amp;t);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">Test</span> <span class="title">t</span>;</span> <span class="comment">//或者开在这里</span></span><br><span class="line">	<span class="keyword">pthread_t</span> tid;</span><br><span class="line">	pthread_create(&amp;tid, <span class="literal">NULL</span>, callback, &amp;t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;主线程id: %ld\n&quot;</span>, pthread_self());</span><br><span class="line"></span><br><span class="line">	pthread_detach(tid);</span><br><span class="line">	pthread_cancel(tid); <span class="comment">//杀死子进程</span></span><br><span class="line"></span><br><span class="line">	pthread_exit(<span class="literal">NULL</span>); <span class="comment">//主线程退出</span></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="c-c-线程的同步和互斥锁"><a href="#c-c-线程的同步和互斥锁" class="headerlink" title="c/c++线程的同步和互斥锁"></a>c/c++线程的同步和互斥锁</h1><h3 id="不同步"><a href="#不同步" class="headerlink" title="不同步"></a>不同步</h3><p>很明显这没有同步，最后不是100</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>; <span class="comment">//全局资源</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">funcA</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> cur = number;</span><br><span class="line">		cur++;</span><br><span class="line">		usleep(<span class="number">10</span>);</span><br><span class="line">		number = cur;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread A, id = %lu, number = %d\n&quot;</span>, pthread_self(), number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">funcB</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> cur = number;</span><br><span class="line">		cur++;</span><br><span class="line">		number = cur;</span><br><span class="line">		usleep(<span class="number">5</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread B, id = %lu, number = %d\n&quot;</span>, pthread_self(), number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> p1, p2;</span><br><span class="line"></span><br><span class="line">	pthread_create(&amp;p1, <span class="literal">NULL</span>, funcA, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_create(&amp;p2, <span class="literal">NULL</span>, funcB, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 阻塞 &amp; 回收</span></span><br><span class="line">	pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>锁：状态（锁/没锁）；加锁信息（线程id）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> number = <span class="number">0</span>; <span class="comment">//全局资源</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> mutex;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">funcA</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">		pthread_mutex_lock(&amp;mutex);</span><br><span class="line">		<span class="keyword">int</span> cur = number;</span><br><span class="line">		cur++;</span><br><span class="line">		usleep(<span class="number">10</span>);</span><br><span class="line">		number = cur;</span><br><span class="line">		pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread A, id = %lu, number = %d\n&quot;</span>, pthread_self(), number);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">funcB</span><span class="params">(<span class="keyword">void</span>* arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">		pthread_mutex_lock(&amp;mutex);</span><br><span class="line">		<span class="keyword">int</span> cur = number;</span><br><span class="line">		cur++;</span><br><span class="line">		number = cur;</span><br><span class="line">		pthread_mutex_unlock(&amp;mutex);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread B, id = %lu, number = %d\n&quot;</span>, pthread_self(), number);</span><br><span class="line">		usleep(<span class="number">5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">pthread_t</span> p1, p2;</span><br><span class="line"></span><br><span class="line">	pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	pthread_create(&amp;p1, <span class="literal">NULL</span>, funcA, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_create(&amp;p2, <span class="literal">NULL</span>, funcB, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 阻塞 &amp; 回收</span></span><br><span class="line">	pthread_join(p1, <span class="literal">NULL</span>);</span><br><span class="line">	pthread_join(p2, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	pthread_mutex_destroy(&amp;mutex);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>gcc/g++小入门</title>
    <url>/2021/05/06/gcc-g-%E5%B0%8F%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>目录结构如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ tree</span><br><span class="line">.</span><br><span class="line">├── include</span><br><span class="line">│   └── func.h</span><br><span class="line">├── main.cpp</span><br><span class="line">└── src</span><br><span class="line">    └── func.cpp</span><br><span class="line"></span><br><span class="line">2 directories, 3 files</span><br></pre></td></tr></table></figure>

<p>main.cpp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;func.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; func(<span class="number">10</span>) &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>func.cpp</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;func.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> num * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>func.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ g++ main.cpp src/func.cpp -Iinclude -o a.out</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ g++ main.cpp src/func.cpp -Iinclude -Wall -std=c++11 -o b.out</span><br></pre></td></tr></table></figure>

<p>生成func的静态库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">cd</span> src</span><br><span class="line"><span class="comment"># 汇编生成func.o</span></span><br><span class="line">❯ g++ func.cpp -c -I../include</span><br><span class="line"><span class="comment"># 生成静态链接库libFunc.a</span></span><br><span class="line">❯ ar rs libFunc.a func.o</span><br><span class="line">ar: creating archive libFunc.a</span><br><span class="line"><span class="comment"># 使用静态库g编译生成static.out</span></span><br><span class="line">❯ <span class="built_in">cd</span> ..</span><br><span class="line">❯ g++ main.cpp -lfunc -Lsrc -Iinclude -o static.out</span><br></pre></td></tr></table></figure>

<p>生成func的动态库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ <span class="built_in">cd</span> src</span><br><span class="line"><span class="comment"># 生成动态库libfunc.so</span></span><br><span class="line">❯ g++ func.cpp -I../include -fPIC -shared -o libfunc.so</span><br><span class="line"><span class="comment"># 使用动态库g编译生成dynamic.out</span></span><br><span class="line">g++ main.cpp -Iinclude -lfunc -Lsrc -o dynamic</span><br><span class="line"><span class="comment"># 运行dynamic</span></span><br><span class="line">DYLD_LIBRARY_PATH=src ./dynamic <span class="comment"># for MacOS</span></span><br><span class="line">LD_LIBRARY_PATH=src ./dynamic   <span class="comment"># for Linux</span></span><br></pre></td></tr></table></figure>

<h2 id="GDB调试"><a href="#GDB调试" class="headerlink" title="GDB调试"></a>GDB调试</h2><p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">100</span>;</span><br><span class="line">	<span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (i &lt;= n) &#123;</span><br><span class="line">		sum += i;</span><br><span class="line">		i += <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;sum = &quot;</span> &lt;&lt; sum &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ g++ -g gdbMain.cpp -o gdbMain</span><br><span class="line">❯ gdb gdbMain</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>iOS开发:CADisplayLink的循环引用问题</title>
    <url>/2021/12/15/iOS%E5%BC%80%E5%8F%91-CADisplayLink%E7%9A%84%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<hr>
<p>讨论weak self不能解决的循环引用</p>
<span id="more"></span>

<h5 id="一般情况ViewController的deinit"><a href="#一般情况ViewController的deinit" class="headerlink" title="一般情况ViewController的deinit"></a>一般情况ViewController的deinit</h5><p>比如在主ViewController里push进VC2</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        <span class="comment">// Do any additional setup after loading the view.</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@IBAction</span> <span class="function"><span class="keyword">func</span> <span class="title">pushBtn</span>(<span class="keyword">_</span> <span class="params">sender</span>: <span class="keyword">Any</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> vc <span class="operator">=</span> <span class="type">VC2</span>()</span><br><span class="line">        navigationController<span class="operator">?</span>.pushViewController(vc, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>VC2里简单看下deninit</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VC2</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.backgroundColor <span class="operator">=</span> .systemCyan</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillLayoutSubviews</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillLayoutSubviews()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;VC2 deinit&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当从VC2返回navigationController时可以看到”VC2 deinit”打印了</p>
<h5 id="加入CADisplayLink"><a href="#加入CADisplayLink" class="headerlink" title="加入CADisplayLink"></a>加入CADisplayLink</h5><p>在VC2里加入CADisplayLink，我们知道CADisplayLink跟着屏幕刷新率走，可以搞一些Core Animation事情</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VC2</span>: <span class="title">UIViewController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> displayLink: <span class="type">CADisplayLink</span>?</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.backgroundColor <span class="operator">=</span> .systemCyan</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillLayoutSubviews</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewWillLayoutSubviews()</span><br><span class="line">        displayLink <span class="operator">=</span> <span class="type">CADisplayLink</span>(target: <span class="keyword">self</span>, selector: #selector(displayLinkSel))</span><br><span class="line">        displayLink<span class="operator">?</span>.frameInterval <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        displayLink<span class="operator">?</span>.add(to: <span class="type">RunLoop</span>.current, forMode: .default)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@objc</span> <span class="function"><span class="keyword">func</span> <span class="title">displayLinkSel</span>()</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;displayLinkSel&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">deinit</span> &#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;VC2 deinit&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里运行看到每一frame刷新都打印了”displayLinkSel”，但是退出时候”VC2 deinit”没有打印，而且”displayLinkSel”一直继续打印，说明循环引用了<br>你可能会想用弱引用解决</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillLayoutSubviews</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillLayoutSubviews()</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> weakSelf <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    displayLink <span class="operator">=</span> <span class="type">CADisplayLink</span>(target: weakSelf, selector: #selector(displayLinkSel))</span><br><span class="line">    displayLink<span class="operator">?</span>.frameInterval <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    displayLink<span class="operator">?</span>.add(to: <span class="type">RunLoop</span>.current, forMode: .default)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者让它nil</span></span><br><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">    displayLink <span class="operator">=</span> <span class="literal">nil</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;VC2 deinit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果还是一样，没有deinit触发，想验证的话可以lldb看下vc2</p>
<h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>写一个代理，这里代理直接让他走消息转发机制，类似objc_mesgSend，我们知道iOS里回去class对象和meta-class对象的方法区找，直接转发就是当objc_mesgSend找不到fail掉的最后最后一步，这样提高效率</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeakProxy</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> target: <span class="type">NSObjectProtocol</span>?</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">init</span>(<span class="params">target</span>: <span class="type">NSObjectProtocol</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.target <span class="operator">=</span> target</span><br><span class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">responds</span>(<span class="params">to</span> <span class="params">aSelector</span>: <span class="type">Selector</span>!)</span> -&gt; <span class="type">Bool</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (target<span class="operator">?</span>.responds(to: aSelector) <span class="operator">??</span> <span class="literal">false</span>) <span class="operator">||</span> <span class="keyword">super</span>.responds(to: aSelector)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">forwardingTarget</span>(<span class="params">for</span> <span class="params">aSelector</span>: <span class="type">Selector</span>!)</span> -&gt; <span class="keyword">Any</span><span class="operator">?</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> target</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，我们让target是刚刚写的代理类</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewWillLayoutSubviews</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.viewWillLayoutSubviews()</span><br><span class="line">    displayLink <span class="operator">=</span> <span class="type">CADisplayLink</span>(target: <span class="type">MyWeakProxy</span>(target: <span class="keyword">self</span>), selector: #selector(displayLinkSel))</span><br><span class="line">    displayLink<span class="operator">?</span>.frameInterval <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    displayLink<span class="operator">?</span>.add(to: <span class="type">RunLoop</span>.current, forMode: .default)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记得让displayLink暂停掉，不然还继续走#selector(displayLinkSel)就会经典的找不到方法runtime错误了。</span></span><br><span class="line"><span class="keyword">deinit</span> &#123;</span><br><span class="line">    displayLink<span class="operator">?</span>.isPaused <span class="operator">=</span> <span class="literal">true</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;VC2 deinit&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后解释下为什么weak self不起作用，原因不复杂，就是传入时候strong引用了，相当于weakSelf!，这样设计也有道理，因为这玩意和runloop绑定的。</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">weak</span> <span class="keyword">var</span> weakSelf <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">displayLink <span class="operator">=</span> <span class="type">CADisplayLink</span>(target: weakSelf<span class="operator">!</span>, selector: #selector(displayLinkSel))</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>iOS开发:Apple Silicon下Xcode编译arm64错误</title>
    <url>/2021/10/21/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<hr>
<p>关于iOS开发Apple Silicon下Xcode编译arm64错误</p>
<span id="more"></span>

<p>pod一些第三方包可能有如下包指定x86，arm64编译错误</p>
<img src="/2021/10/21/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF_2.jpg" class="" title="iOS开发-Apple-Silicon下Xcode编译arm64错误_2">
<p>最简单方式xcode直接开rosetta2（未评估成功率，但编译效率会下降）</p>
<img src="/2021/10/21/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF_1.jpg" class="" title="iOS开发-Apple-Silicon下Xcode编译arm64错误_1">
<p>或者<br>1.在build setting搜excluded architectures，里面添加arm64</p>
<img src="/2021/10/21/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF/iOS%E5%BC%80%E5%8F%91-Apple-Silicon%E4%B8%8BXcode%E7%BC%96%E8%AF%91arm64%E9%94%99%E8%AF%AF_2.jpg" class="" title="iOS开发-Apple-Silicon下Xcode编译arm64错误_2">
<p>2.podfile最后追增</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">post_install <span class="keyword">do</span> |installer|</span><br><span class="line">  installer.pods_project.build_configurations.each <span class="keyword">do</span> |config|</span><br><span class="line">    config.build_settings[<span class="string">&quot;EXCLUDED_ARCHS[sdk=iphonesimulator*]&quot;</span>] = <span class="string">&quot;arm64&quot;</span></span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>3.重新pod install</p>
]]></content>
  </entry>
  <entry>
    <title>iOS开发:Cocoapods创建到发包</title>
    <url>/2021/12/08/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85/</url>
    <content><![CDATA[<hr>
<p>iOS framework开发Cocoapods创建到发包</p>
<span id="more"></span>

<h5 id="1-pod模板创建"><a href="#1-pod模板创建" class="headerlink" title="1. pod模板创建"></a>1. pod模板创建</h5><p>也可以选择自己用xcode工程创建，但是之后得自己配置podspec，这里选择用官方模板pod lib create xxx</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pod lib create HBGradientBlur</span><br><span class="line">pod lib默认是拉下iOS9.0的版本，swift版本应该是4没到5，我一般是手动改下新版，pod和demo的target那里都要改</span><br></pre></td></tr></table></figure>
<img src="/2021/12/08/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85_1.jpg" class="" title="iOS开发-Cocoapods创建到发包_1">

<h5 id="2-开发"><a href="#2-开发" class="headerlink" title="2. 开发"></a>2. 开发</h5><p>创建文件到ReplaceMe.swift同级，这里相当分包开发，之后要抛给app使用的话得写public</p>
<img src="/2021/12/08/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85_2.jpg" class="" title="iOS开发-Cocoapods创建到发包_2">
<p>然后是验证.podspec<br>模版一般需要补全这几个部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s.summary          &#x3D; &#39;A GradientBlur UIView to build blur back ground like apple music.&#39;</span><br><span class="line">s.description      &#x3D; &lt;&lt;-DESC</span><br><span class="line">A GradientBlur UIView to build blur back ground like apple music. It cuts an UIImage to several ciimage to build gradient color.</span><br><span class="line">                    DESC</span><br><span class="line">s.swift_version &#x3D; &#39;5.0&#39;</span><br><span class="line">s.ios.deployment_target &#x3D; &#39;14.0&#39;</span><br></pre></td></tr></table></figure>
<p>然后是pod lib lint HBGradientBlur.podspec，能验过就好</p>
<img src="/2021/12/08/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85_3.jpg" class="" title="iOS开发-Cocoapods创建到发包_3">

<h5 id="3-push到托管平台"><a href="#3-push到托管平台" class="headerlink" title="3. push到托管平台"></a>3. push到托管平台</h5><p>这里可以直接挂个tag上传，但是我一般是在github自己创建tag</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;xxx.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>
<p>然后创建下tag，到时候pod会从github按tag拉，这里tag要和podspec同步版本号</p>
<img src="/2021/12/08/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85_4.jpg" class="" title="iOS开发-Cocoapods创建到发包_4">

<h5 id="3-发布"><a href="#3-发布" class="headerlink" title="3. 发布"></a>3. 发布</h5><p>如果没注册过需要在终端注册下，需要邮箱验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pod trunk register haoboxuxu@icloud.com &#39;haoboxuxu&#39;</span><br><span class="line">pod trunk me</span><br></pre></td></tr></table></figure>
<p>然后trunk push发布到pod平台，它会需要一些时间去验证，大概15分钟吧，然后就可以pod到自己的app里了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pod trunk push HBGradientBlur.podspec</span><br></pre></td></tr></table></figure>
<p>这里m1芯好像是ruby问题要rosette下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">arch -x86_64 pod trunk push HBGradientBlur.podspec</span><br></pre></td></tr></table></figure>
<p>看到成功消息就好了</p>
<img src="/2021/12/08/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85/iOS%E5%BC%80%E5%8F%91-Cocoapods%E5%88%9B%E5%BB%BA%E5%88%B0%E5%8F%91%E5%8C%85_5.jpg" class="" title="iOS开发-Cocoapods创建到发包_5">
]]></content>
  </entry>
  <entry>
    <title>iOS开发:Debug之内存图检测循环引用</title>
    <url>/2021/12/19/iOS%E5%BC%80%E5%8F%91-Debug%E4%B9%8B%E5%86%85%E5%AD%98%E5%9B%BE%E6%A3%80%E6%B5%8B%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/</url>
    <content><![CDATA[<hr>
<p>iOS framework开发Cocoapods创建到发包<br>还没写呢</p>
<span id="more"></span>



]]></content>
  </entry>
  <entry>
    <title>iOS开发:MVP</title>
    <url>/2022/03/10/iOS%E5%BC%80%E5%8F%91-MVP/</url>
    <content><![CDATA[<hr>
<p>iOS MVP模式，<a href="https://github.com/haoboxuxu/iOSDummyDemos/tree/main/Design%20Patterns">Github代码在此</a></p>
<span id="more"></span>

<p>上次说到MVVM，这次说MVP<br>MVVM更多强调View和ViewModel的联系，MVP是把一部分的VC逻辑转移到Presenter<br>如图（图无VC，同理，并不是说VC省去了，只是没画…）</p>
<img src="/2022/03/10/iOS%E5%BC%80%E5%8F%91-MVP/1.jpg" class="" title="1.jpg">

<p>还是写个TableView，这次带网络请求，所以目标就是把网络请求的代码扔到Presenter里给我们的VC减减肥，<br>在Presenter里，还是和MVC一样的delegate思想，要求调用的VC遵循这个协议，并且封装了网络请求和其他的业务逻辑</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">UserPresenterDelegate</span>: <span class="title">AnyObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">presentUsers</span>(<span class="params">users</span>: [<span class="type">User</span>])</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">presentAlert</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">message</span>: <span class="type">String</span>)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typealias</span> <span class="type">Presenter</span> <span class="operator">=</span> <span class="type">UserPresenterDelegate</span> &amp; <span class="type">UIViewController</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserPresenter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">weak</span> <span class="keyword">var</span> delegate: <span class="type">UserPresenterDelegate</span>?</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setViewDelegate</span>(<span class="params">delegate</span>: <span class="type">Presenter</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.delegate <span class="operator">=</span> delegate</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getUsers</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URL</span>(string: <span class="string">&quot;https://jsonplaceholder.typicode.com/users&quot;</span>) <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">URLSession</span>.shared.dataTask(with: url) &#123; [<span class="keyword">weak</span> <span class="keyword">self</span>] data, <span class="keyword">_</span>, error <span class="keyword">in</span></span><br><span class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> data <span class="operator">=</span> data, error <span class="operator">==</span> <span class="literal">nil</span> <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> users <span class="operator">=</span> <span class="keyword">try</span> <span class="type">JSONDecoder</span>().decode([<span class="type">User</span>].<span class="keyword">self</span>, from: data)</span><br><span class="line">                <span class="built_in">print</span>(users)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">self</span><span class="operator">?</span>.delegate<span class="operator">?</span>.presentUsers(users: users)</span><br><span class="line">            &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">                <span class="built_in">print</span>(error)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.resume()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Model里就是简单的解码json数据</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span>: <span class="title">Codable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> email: <span class="type">String</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在VC里要遵循Presenter的协议，然后通过presenter请求数据，更新tableview，例子很简单，可以看到把网络请求的功能从VC挪走<br>后续需要扩展业务的话可以在PresenterDelegate里增加，然后在VC里回调</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserVC</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tableView: <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>()</span><br><span class="line">        tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;cell&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">let</span> presenter <span class="operator">=</span> <span class="type">UserPresenter</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> users: [<span class="type">User</span>] <span class="operator">=</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        title <span class="operator">=</span> <span class="string">&quot;Users&quot;</span></span><br><span class="line">        </span><br><span class="line">        presenter.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        presenter.getUsers()</span><br><span class="line">        </span><br><span class="line">        view.addSubview(tableView)</span><br><span class="line">        tableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        tableView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;cell&quot;</span>, for: indexPath)</span><br><span class="line">        <span class="keyword">let</span> user <span class="operator">=</span> <span class="keyword">self</span>.users[indexPath.row]</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;👾<span class="subst">\(user.name)</span> 📧<span class="subst">\(user.email)</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        users.count</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        tableView.deselectRow(at: indexPath, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">UserVC</span>: <span class="title">UserPresenterDelegate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">presentUsers</span>(<span class="params">users</span>: [<span class="type">User</span>])</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.users <span class="operator">=</span> users</span><br><span class="line">        </span><br><span class="line">        <span class="type">DispatchQueue</span>.main.async &#123;</span><br><span class="line">            <span class="keyword">self</span>.tableView.reloadData()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">presentAlert</span>(<span class="params">title</span>: <span class="type">String</span>, <span class="params">message</span>: <span class="type">String</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//更多的业务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2022/03/10/iOS%E5%BC%80%E5%8F%91-MVP/2.jpg" class="" title="2.jpg">]]></content>
  </entry>
  <entry>
    <title>iOS开发:MVVM</title>
    <url>/2022/02/25/iOS%E5%BC%80%E5%8F%91-MVVM/</url>
    <content><![CDATA[<hr>
<p>iOS MVVM模式</p>
<span id="more"></span>

<p>MVVM如图，是为了解决MVC在大项目里VC变得臃肿的模式</p>
<img src="/2022/02/25/iOS%E5%BC%80%E5%8F%91-MVVM/1.jpg" class="" title="1.jpg">

<p>典型的MVC就如写个简单的TableView，逻辑都扔到VC里</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tableView: <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>()</span><br><span class="line">        tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;cell&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(tableView)</span><br><span class="line">        tableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        tableView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;cell&quot;</span>, for: indexPath)</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> data[indexPath.row]</span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        data.count</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        tableView.deselectRow(at: indexPath, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>随着Data的变化，抽取出ViewModel这一概念，使得cell的数据和视图的更新多了一层</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> nation: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CellViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> name: <span class="type">String</span></span><br><span class="line">    <span class="keyword">let</span> nation: <span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tableView: <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>()</span><br><span class="line">        tableView.register(<span class="type">UITableViewCell</span>.<span class="keyword">self</span>, forCellReuseIdentifier: <span class="string">&quot;cell&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data <span class="operator">=</span> [</span><br><span class="line">        <span class="type">User</span>(name: <span class="string">&quot;haoboxuxu&quot;</span>, nation: <span class="string">&quot;China&quot;</span>),</span><br><span class="line">        <span class="type">User</span>(name: <span class="string">&quot;Batman&quot;</span>, nation: <span class="string">&quot;Gotham&quot;</span>),</span><br><span class="line">        <span class="type">User</span>(name: <span class="string">&quot;Hopper X&quot;</span>, nation: <span class="string">&quot;Space&quot;</span>),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLoad()</span><br><span class="line">        view.addSubview(tableView)</span><br><span class="line">        tableView.delegate <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">        tableView.dataSource <span class="operator">=</span> <span class="keyword">self</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLayoutSubviews</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.viewDidLayoutSubviews()</span><br><span class="line">        tableView.frame <span class="operator">=</span> view.bounds</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="string">&quot;cell&quot;</span>, for: indexPath)</span><br><span class="line">        <span class="keyword">let</span> model <span class="operator">=</span> data[indexPath.row]</span><br><span class="line">        <span class="keyword">let</span> viewModel <span class="operator">=</span> <span class="type">CellViewModel</span>(name: model.name, nation: model.nation)</span><br><span class="line">        cell.textLabel<span class="operator">?</span>.text <span class="operator">=</span> <span class="string">&quot;<span class="subst">\(viewModel.name)</span> <span class="subst">\(viewModel.nation)</span>&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">numberOfRowsInSection</span> <span class="params">section</span>: <span class="type">Int</span>)</span> -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">        data.count</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">didSelectRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> &#123;</span><br><span class="line">        tableView.deselectRow(at: indexPath, animated: <span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你可能觉得这样和MVC没什么大区别，但是到了如果要自定义cell或者其他自定义视图的场景就更加展现出用途</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定的UITableViewCell</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomCell</span>: <span class="title">UITableViewCell</span> </span>&#123;</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> nameLabel: <span class="type">UILabel</span>!</span><br><span class="line">    <span class="keyword">@IBOutlet</span> <span class="keyword">weak</span> <span class="keyword">var</span> nationLabel: <span class="type">UILabel</span>!</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">let</span> cellID <span class="operator">=</span> <span class="string">&quot;CustomCell&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">nib</span>()</span> -&gt; <span class="type">UINib</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="type">UINib</span>(nibName: <span class="string">&quot;CustomCell&quot;</span>, bundle: <span class="literal">nil</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">awakeFromNib</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.awakeFromNib()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">setSelected</span>(<span class="keyword">_</span> <span class="params">selected</span>: <span class="type">Bool</span>, <span class="params">animated</span>: <span class="type">Bool</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setSelected(selected, animated: animated)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">configWith</span>(<span class="keyword">_</span> <span class="params">vm</span>: <span class="type">CellViewModel</span>)</span> &#123;</span><br><span class="line">        nameLabel.text <span class="operator">=</span> vm.name</span><br><span class="line">        nationLabel.text <span class="operator">=</span> vm.nation</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在主VC里</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span>, <span class="title">UITableViewDelegate</span>, <span class="title">UITableViewDataSource</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tableView: <span class="type">UITableView</span> <span class="operator">=</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> tableView <span class="operator">=</span> <span class="type">UITableView</span>()</span><br><span class="line">        tableView.register(<span class="type">CustomCell</span>.nib(), forCellReuseIdentifier: <span class="type">CustomCell</span>.cellID)</span><br><span class="line">        <span class="keyword">return</span> tableView</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">tableView</span>(<span class="keyword">_</span> <span class="params">tableView</span>: <span class="type">UITableView</span>, <span class="params">cellForRowAt</span> <span class="params">indexPath</span>: <span class="type">IndexPath</span>)</span> -&gt; <span class="type">UITableViewCell</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> cell <span class="operator">=</span> tableView.dequeueReusableCell(withIdentifier: <span class="type">CustomCell</span>.cellID, for: indexPath) <span class="keyword">as!</span> <span class="type">CustomCell</span></span><br><span class="line">        <span class="keyword">let</span> model <span class="operator">=</span> data[indexPath.row]</span><br><span class="line">        <span class="keyword">let</span> viewModel <span class="operator">=</span> <span class="type">CellViewModel</span>(name: model.name, nation: model.nation)</span><br><span class="line">        cell.configWith(viewModel) <span class="comment">//数据交给他</span></span><br><span class="line">        <span class="keyword">return</span> cell</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当当！</p>
<img src="/2022/02/25/iOS%E5%BC%80%E5%8F%91-MVVM/2.jpg" class="" title="2.jpg">]]></content>
  </entry>
  <entry>
    <title>iOS开发:Swift混编桥接OC</title>
    <url>/2021/10/05/iOS%E5%BC%80%E5%8F%91-Swift%E6%B7%B7%E7%BC%96%E6%A1%A5%E6%8E%A5OC/</url>
    <content><![CDATA[<hr>
<p>关于iOS开发Swift混编桥接OC技巧</p>
<span id="more"></span>

<p>写swift项目<a href="https://github.com/jdg/MBProgressHUD">MBProgressHUD</a>时遇到pod一个第三方是oc的库，可以通过桥接方式。<br>Apple的官方文档：<a href="https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_objective-c_into_swift">importing_objective-c_into_swift</a></p>
<p>1.首先在项目创建header文件<br>2.然后在target下搜bridge把header编译时带上</p>
<img src="/2021/10/05/iOS%E5%BC%80%E5%8F%91-Swift%E6%B7%B7%E7%BC%96%E6%A1%A5%E6%8E%A5OC/iOS%E5%BC%80%E5%8F%91-Swift%E6%B7%B7%E7%BC%96%E6%A1%A5%E6%8E%A5OC_1.jpg" class="" title="iOS开发-Swift混编桥接OC_1">
<p>3.header里带上这个包的oc import</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#ifndef Bridging_Header_h</span><br><span class="line">#define Bridging_Header_h</span><br><span class="line"></span><br><span class="line">#import &quot;MBProgressHUD.h&quot;</span><br><span class="line"></span><br><span class="line">#endif &#x2F;* Bridging_Header_h *&#x2F;</span><br></pre></td></tr></table></figure>
<p>4.在swift里就可以直接import了（可能需要先command b一下）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> MBProgressHUD</span><br><span class="line"><span class="operator">...</span></span><br><span class="line"><span class="keyword">let</span> hud <span class="operator">=</span> <span class="type">MBProgressHUD</span>.showAdded(to: view, animated: <span class="literal">true</span>)</span><br><span class="line">hud.mode <span class="operator">=</span> .text</span><br><span class="line">hud.label.text <span class="operator">=</span> <span class="string">&quot;这是一个hud&quot;</span></span><br><span class="line">hud.hide(animated: <span class="literal">true</span>, afterDelay: <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>iOS开发:URLSchemes</title>
    <url>/2022/01/13/iOS%E5%BC%80%E5%8F%91-URLSchemes/</url>
    <content><![CDATA[<hr>
<p>关于iOS开发URLSchemes和App跳转</p>
<span id="more"></span>

<p>我们都知道iOS每个App都是沙箱机制，App之前不共享磁盘空间，所以一些例如跳转到第三方App登陆以及跳转回来的逻辑就是通过URLSchemes完成的<br>最近碰到用支付宝登陆，便记录下。</p>
<p>首先我们到target的Info里配置我们App的URLSchemes，他提供了跳转回我们App的URL逻辑</p>
<img src="/2022/01/13/iOS%E5%BC%80%E5%8F%91-URLSchemes/1.jpg" class="" title="1.jpg">

<p>比如我们在Safari中输入刚刚配置的PinkBook://<br>就可以跳转打开我们的App</p>
<img src="/2022/01/13/iOS%E5%BC%80%E5%8F%91-URLSchemes/2.jpg" class="" title="2.jpg">

<p>由于是接入支付宝的一件登陆SDK遇到的，所以这个逻辑在打开App跳转到支付宝以及支付宝验证后跳转回来时没有问题的。<br>但是你可能想看一些log日志，比如这里闭包回调的result，直接print看都不到，是因为App已经从后台切出去再切回来了(如果遇到被系统杀死或者App睡死了的情况下)。</p>
<img src="/2022/01/13/iOS%E5%BC%80%E5%8F%91-URLSchemes/3.jpg" class="" title="3.jpg">

<p>所以应该通过SceneDelegate的某个生命周期回调来看</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">scene</span>(<span class="keyword">_</span> <span class="params">scene</span>: <span class="type">UIScene</span>, <span class="params">openURLContexts</span> <span class="params">URLContexts</span>: <span class="type">Set</span>&lt;<span class="type">UIOpenURLContext</span>&gt;)</span> &#123;</span><br><span class="line">        <span class="keyword">guard</span> <span class="keyword">let</span> url <span class="operator">=</span> <span class="type">URLContexts</span>.first<span class="operator">?</span>.url <span class="keyword">else</span> &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">        <span class="keyword">if</span> url.host <span class="operator">==</span> <span class="string">&quot;safepay&quot;</span> &#123;</span><br><span class="line">            <span class="type">AlipaySDK</span>.defaultService()<span class="operator">?</span>.processAuth_V2Result(url) &#123; result <span class="keyword">in</span></span><br><span class="line">                <span class="comment">// ...</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>iOS开发:本地化适配</title>
    <url>/2021/10/02/iOS%E5%BC%80%E5%8F%91-%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%80%82%E9%85%8D/</url>
    <content><![CDATA[<hr>
<p>关于iOS开发中本地化适配技巧</p>
<span id="more"></span>
<p>一般先在project-&gt;info页面配置需要本地化的语言</p>
<img src="/2021/10/02/iOS%E5%BC%80%E5%8F%91-%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%80%82%E9%85%8D/iOS%E5%BC%80%E5%8F%91_%E6%9C%AC%E5%9C%B0%E5%8C%96%E9%80%82%E9%85%8D_1.jpg" class="" title="iOS开发_本地化适配_1">

<p>然后会弹窗需要适配的storyboard，点选是之后会出现和storyboard同名的.stringts文件，以ObjectID为key逐个适配text文本，但是这种方式在xcode不能做到随改随更新，brew install bartycrouch这个插件可以搞定。</p>
<p>其他代码中文本的适配可以创建Localizable.strings文件（名字不能错）</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在需要文本的代码写上</span></span><br><span class="line"><span class="type">NSLocalizedString</span>(<span class="string">&quot;Home&quot;</span>, comment: <span class="string">&quot;comment是注释而已&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Localizable文件写本地化翻译，这个文件右边配置面板可勾选语言</span></span><br><span class="line"><span class="string">&quot;Home&quot;</span> <span class="operator">=</span> <span class="string">&quot;主页&quot;</span>;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>关于光线追踪:下一周的球体uv坐标</title>
    <url>/2021/05/10/%E5%85%B3%E4%BA%8E%E5%85%89%E7%BA%BF%E8%BF%BD%E8%B8%AA-%E4%B8%8B%E4%B8%80%E5%91%A8%E7%9A%84%E7%90%83%E4%BD%93uv%E5%9D%90%E6%A0%87/</url>
    <content><![CDATA[<hr>
<p>文章更新中</p>
<span id="more"></span>

<p>就是文中这段代码的三角函数部分</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSphereUV</span><span class="params">(<span class="keyword">const</span> point3&amp; p, <span class="keyword">double</span>&amp; u, <span class="keyword">double</span>&amp; v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p: a given point on the sphere of radius one, centered at the origin.</span></span><br><span class="line">    <span class="comment">// u: returned value [0,1] of angle around the Y axis from X=-1.</span></span><br><span class="line">    <span class="comment">// v: returned value [0,1] of angle from Y=-1 to Y=+1.</span></span><br><span class="line">    <span class="comment">//     &lt;1 0 0&gt; yields &lt;0.50 0.50&gt;       &lt;-1  0  0&gt; yields &lt;0.00 0.50&gt;</span></span><br><span class="line">    <span class="comment">//     &lt;0 1 0&gt; yields &lt;0.50 1.00&gt;       &lt; 0 -1  0&gt; yields &lt;0.50 0.00&gt;</span></span><br><span class="line">    <span class="comment">//     &lt;0 0 1&gt; yields &lt;0.25 0.50&gt;       &lt; 0  0 -1&gt; yields &lt;0.75 0.50&gt;</span></span><br><span class="line">    <span class="keyword">auto</span> theta = <span class="built_in">acos</span>(-p.<span class="built_in">y</span>());</span><br><span class="line">    <span class="keyword">auto</span> phi = <span class="built_in">atan2</span>(-p.<span class="built_in">z</span>(), p.<span class="built_in">x</span>()) + pi;</span><br><span class="line"></span><br><span class="line">    u = phi / (<span class="number">2</span>*pi);</span><br><span class="line">    v = theta / pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第四章没有配图，一开始我也没看懂uv坐标，自己画画图就好了</p>
]]></content>
  </entry>
  <entry>
    <title>美妙的随机数和宇宙🌌</title>
    <url>/2021/04/21/%E7%BE%8E%E5%A6%99%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8C%E5%AE%87%E5%AE%99%F0%9F%8C%8C/</url>
    <content><![CDATA[<hr>
<p>最近的交了WWDC2021作品，然后我凑巧通过伪随机数生成一个SkyBox，说一下思路嘿嘿</p>
<span id="more"></span>

<h5 id="最近的交了WWDC2021作品，然后我凑巧通过伪随机数生成一个SkyBox，说一下思路嘿嘿"><a href="#最近的交了WWDC2021作品，然后我凑巧通过伪随机数生成一个SkyBox，说一下思路嘿嘿" class="headerlink" title="最近的交了WWDC2021作品，然后我凑巧通过伪随机数生成一个SkyBox，说一下思路嘿嘿"></a>最近的交了WWDC2021作品，然后我凑巧通过伪随机数生成一个SkyBox，说一下思路嘿嘿</h5><p>然后这篇文主要是写给有了解过Ray Tracing in one weekend看的<br>下面代码都是Metal<br>这个随机书算法是从StackOverflow拿过来的，日常CV嘿嘿，但是原回答没说怎么用，这几我姑且把x和y算作屏幕像素的texturecoord的x和y<br>z是从CPU那边buffer过来的时钟信号，主要是每一帧能z+1就好了</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Generate a random float in the range [0.0f, 1.0f] using x, y, and z (based on the xor128 algorithm)</span></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">randomer_gen_float</span><span class="params">(thread <span class="keyword">const</span> uint2&amp; position, <span class="keyword">int</span> z)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> seed = position.x + position.y * <span class="number">57</span> + z * <span class="number">241</span>;</span><br><span class="line">    seed= (seed&lt;&lt; <span class="number">13</span>) ^ seed;</span><br><span class="line">    <span class="keyword">return</span> (( <span class="number">1.0</span> - ( (seed * (seed * seed * <span class="number">15731</span> + <span class="number">789221</span>) + <span class="number">1376312589</span>) &amp; <span class="number">2147483647</span>) / <span class="number">1073741824.0f</span>) + <span class="number">1.0f</span>) / <span class="number">2.0f</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里写了一个SkyBox的Material，参数什么的姑且不看，<br>主要是c：和原书中生成天空渐变色一样<br>     float rd是vec3的三维随机数，别忘了z要+1、+2，不然一个像素内的时间种子z是一样的<br>     pow是滤波，需要把rd中偏向灰白色的像素过滤掉，只留下发亮的星星✨，把✨给我们的star，然后SkyBox这支Material会反射回去</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SkyBox</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SkyBox</span>() &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">radiate</span><span class="params">(thread <span class="keyword">const</span> Ray&amp; r_in,</span></span></span><br><span class="line"><span class="function"><span class="params">                 thread <span class="keyword">const</span> HitRecord&amp; rec,</span></span></span><br><span class="line"><span class="function"><span class="params">                 thread float3&amp; attenuation,</span></span></span><br><span class="line"><span class="function"><span class="params">                 thread Ray&amp; radiated,</span></span></span><br><span class="line"><span class="function"><span class="params">                 thread <span class="keyword">const</span> uint2&amp; position, <span class="keyword">float</span> seed)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">        float3 unit_direction = <span class="built_in">unit_vector</span>(r_in.<span class="built_in">direction</span>());</span><br><span class="line">        <span class="keyword">float</span> t = <span class="number">0.9f</span>*(unit_direction.y + <span class="number">1.0f</span>);</span><br><span class="line">        float3 c = (<span class="number">1.0f</span>-t)*<span class="built_in">float3</span>(<span class="number">0.53</span>, <span class="number">0.5</span>, <span class="number">0.4</span>) + t*<span class="built_in">float3</span>(<span class="number">0.05</span>, <span class="number">0.05</span>, <span class="number">0.05</span>); <span class="comment">// space background</span></span><br><span class="line">        <span class="keyword">float</span> gradient = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">float</span> rd = <span class="built_in">pow</span>(<span class="built_in">randomer_gen_float</span>(<span class="built_in">uint2</span>(gradient*<span class="built_in">abs</span>(rec.p.x), gradient*<span class="built_in">abs</span>(rec.p.y)), gradient*<span class="built_in">abs</span>(rec.p.x+rec.p.y+rec.p.z)), <span class="number">1000</span>);</span><br><span class="line">        float3 star = <span class="built_in">float3</span>(rd, rd, rd<span class="number">-0.01</span>);</span><br><span class="line">        float3 reflected = <span class="built_in">reflect</span>(<span class="built_in">unit_vector</span>(r_in.<span class="built_in">direction</span>()), rec.normal);</span><br><span class="line">        radiated = <span class="built_in">Ray</span>(rec.p, reflected);</span><br><span class="line">        attenuation = star + c;</span><br><span class="line">        attenuation *= <span class="number">2.5</span>;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">dot</span>(radiated.<span class="built_in">direction</span>(), rec.normal) &lt; <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>最后就是因为这支SkyBox是天空盒，相机在里面，需要把反射的方向取个反，这行代码所在位置相当于书里的ray_color里，我的写法里的cur_ray是去掉了递归，循环的写法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cur_ray = <span class="built_in">Ray</span>(radiated.orig, -radiated.<span class="built_in">direction</span>());</span><br></pre></td></tr></table></figure>
<h5 id="看看效果咯"><a href="#看看效果咯" class="headerlink" title="看看效果咯"></a>看看效果咯</h5><img src="/2021/04/21/%E7%BE%8E%E5%A6%99%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8C%E5%AE%87%E5%AE%99%F0%9F%8C%8C/%E7%BE%8E%E5%A6%99%E7%9A%84%E9%9A%8F%E6%9C%BA%E6%95%B0%E5%92%8C%E5%AE%87%E5%AE%99%F0%9F%8C%8C_1.jpg" class="" title="美妙的随机数和宇宙🌌_1">]]></content>
  </entry>
  <entry>
    <title>实现一个简单neural networks</title>
    <url>/2019/10/09/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95neural-networks/</url>
    <content><![CDATA[<hr>
<span id="more"></span>

<p><a href="https://github.com/haoboxuxu/Tensorflow-Theory/blob/master/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/9_%E6%89%8B%E5%86%99%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.py">源代码</a><br>先定义一些数据，X和y</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">X = np.array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br><span class="line">y = np.array([[<span class="number">0</span>],</span><br><span class="line">              [<span class="number">1</span>],</span><br><span class="line">              [<span class="number">1</span>],</span><br><span class="line">              [<span class="number">0</span>]])</span><br></pre></td></tr></table></figure>

<p>然后是sigmoid激活函数，deriv true是前向传播，就是常见的sigmoid，deriv false为反向传播，就是sigmoid求导的结果，如果不明白为什么是x*(1-x)，可以看如下的求导，这里的x是sigmoid(x)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span>(<span class="params">x, deriv=<span class="literal">False</span></span>):</span></span><br><span class="line">    <span class="keyword">if</span> deriv == <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">return</span> x * (<span class="number">1</span> - x)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-x))</span><br></pre></td></tr></table></figure>

<img src="/2019/10/09/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95neural-networks/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95neural-networks_1.jpg" class="" title="实现一个简单neural-networks_1">

<p>做一个两层的nn，这里的w0和w1映射到（-1，1），所以做了<em>2和+1操作，注意维度，w0是和X相乘，w1是和（w0</em>X）结果相乘。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">w0 = <span class="number">2</span> * np.random.random((<span class="number">3</span>, <span class="number">4</span>)) - <span class="number">1</span></span><br><span class="line">w1 = <span class="number">2</span> * np.random.random((<span class="number">4</span>, <span class="number">1</span>)) - <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>然后我们迭代一下，这里的l1和l2是正向，需要sigmoid。然后loss就是y – l2<br>l2_delta是反向，这里求导，l1_error和最后的loss是同理的，这两个sigmoid传入都是false。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">50000</span>):</span><br><span class="line">    l0 = X</span><br><span class="line">    l1 = sigmoid(np.dot(l0, w0))</span><br><span class="line">    l2 = sigmoid(np.dot(l1, w1))</span><br><span class="line"></span><br><span class="line">    l2_error = y - l2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (j % <span class="number">100</span>) == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;err = &quot;</span> + <span class="built_in">str</span>(np.mean(np.<span class="built_in">abs</span>(l2_error))))</span><br><span class="line"></span><br><span class="line">    l2_delta = l2_error * sigmoid(l2, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    l1_error = l2_delta.dot(w1.T)</span><br><span class="line">    l1_delta = l1_error * sigmoid(l1, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    w1 += l1.T.dot(l2_delta)</span><br><span class="line">    w0 += l0.T.dot(l1_delta)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
